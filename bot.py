from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, ConversationHandler
import logging
import os
from dotenv import load_dotenv
from collections import defaultdict

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")

# --- –î–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö ---
banks = {
    "–¢–∏–Ω—å–∫–æ—Ñ—Ñ": {
        "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–ª—ç–∫": {
            "age_limit": 14,
            "advantages": ["–ö—ç—à–±—ç–∫ 1-30%", "–î–æ 7% –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫"],
            "ref_link": "https://tinkoff.ru/black",
            "promo": ["+1000 ‚ÇΩ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"],
            "card_type": ["cashback"]
        },
        "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ü–ª–∞—Ç–∏–Ω—É–º": {
            "age_limit": 18,
            "advantages": ["–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–æ 700 000 ‚ÇΩ", "–†–∞—Å—Å—Ä–æ—á–∫–∞ 0%"],
            "ref_link": "https://tinkoff.ru/platinum",
            "card_type": ["credit"]
        }
    }
}

user_data = defaultdict(lambda: {
    'age': None,
    'selected_cards': [],
    'preferences': []
})

ASK_AGE = 1
SELECT_CARDS = 2

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def build_keyboard(buttons):
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=callback)] for text, callback in buttons])

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    keyboard = [
        ("14-17 –ª–µ—Ç", "age_14_17"),
        ("18+ –ª–µ—Ç", "age_18_plus")
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:",
        reply_markup=build_keyboard(keyboard)
    )
    return ASK_AGE

async def handle_age(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data[user_id]['age'] = 14 if query.data == "age_14_17" else 18

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
    await show_card_selection(query)
    return SELECT_CARDS

async def show_card_selection(query):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç"""
    user_id = query.from_user.id  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ user_id

    keyboard = []
    for bank_name, cards in banks.items():
        for card_name, data in cards.items():
            if user_data[user_id]['age'] >= data['age_limit']:
                is_selected = card_name in user_data[user_id]['selected_cards']
                text = f"{'‚úÖ ' if is_selected else ''}{card_name}"
                keyboard.append((text, f"select_{bank_name}_{card_name}"))

    keyboard.append(("üîç –°—Ä–∞–≤–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", "compare_selected"))
    keyboard.append(("üîô –ù–∞–∑–∞–¥", "back_main"))

    await query.edit_message_text(
        "üîç –í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
        reply_markup=build_keyboard(keyboard)
    )

async def handle_card_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data.startswith("select_"):
        _, bank_name, card_name = query.data.split("_", 2)
        
        if card_name in user_data[user_id]['selected_cards']:
            user_data[user_id]['selected_cards'].remove(card_name)
        else:
            user_data[user_id]['selected_cards'].append(card_name)

        await show_card_selection(query)

    elif query.data == "compare_selected":
        await compare_selected_cards(query)

    elif query.data == "back_main":
        await start(update, context)

async def compare_selected_cards(query):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç"""
    user_id = query.from_user.id  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ user_id
    selected = user_data[user_id]['selected_cards']

    if not selected:
        await query.edit_message_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!")
        return

    text = "üîç <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç:</b>\n\n"
    for card_name in selected:
        for bank_name, cards in banks.items():
            if card_name in cards:
                data = cards[card_name]
                text += f"üè¶ <b>{bank_name}</b> - <b>{card_name}</b>\n"
                text += "üî• <u>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</u>\n- " + "\n- ".join(data["advantages"]) + "\n\n"

    keyboard = [("üîô –ù–∞–∑–∞–¥", "category_banks")]
    await query.edit_message_text(
        text,
        reply_markup=build_keyboard(keyboard),
        parse_mode="HTML"
    )

async def set_preferences(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    preferences = update.message.text.split(',')
    user_data[user_id]['preferences'] = [pref.strip() for pref in preferences]
    await update.message.reply_text(text="–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

async def filter_cards(update: Update, context: CallbackContext):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    preferences = user_data[user_id].get('preferences', [])
    age_group = user_data[user_id]['age']
    cards = get_cards_by_age(age_group)
    filtered_cards = [card for card in cards if any(pref in card['advantages'] for pref in preferences)]

    if filtered_cards:
        text = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞—Ä—Ç—ã:\n\n"
        for card in filtered_cards:
            text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {card['name']}\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {card['benefits']}\n–°—Å—ã–ª–∫–∞: {card['link']}\n\n"
        await update.message.reply_text(text=text)
    else:
        await update.message.reply_text(text="–ù–µ—Ç –∫–∞—Ä—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.")

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASK_AGE: [CallbackQueryHandler(handle_age)],
            SELECT_CARDS: [CallbackQueryHandler(handle_card_selection)]
        },
        fallbacks=[],
        per_user=True,
        per_chat=True,
        per_message=False
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_card_selection, pattern="^select_"))
    app.add_handler(CallbackQueryHandler(compare_selected_cards, pattern="^compare_selected$"))
    app.add_handler(CommandHandler('preferences', set_preferences))
    app.add_handler(CommandHandler('filter', filter_cards))

    app.run_polling()

if __name__ == "__main__":
    main()
