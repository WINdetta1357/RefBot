from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ConversationHandler, ContextTypes
)
import logging
import os
from dotenv import load_dotenv
from collections import defaultdict

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")

# --- –î–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö ---
banks = {
    "–¢–∏–Ω—å–∫–æ—Ñ—Ñ": {
        "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–ª—ç–∫": {
            "age_limit": 14,
            "advantages": ["–ö—ç—à–±—ç–∫ 1-30%", "–î–æ 7% –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫"],
            "ref_link": "https://tinkoff.ru/black",
            "promo": ["+1000 ‚ÇΩ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"],
            "card_type": ["cashback"]
        },
        "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ü–ª–∞—Ç–∏–Ω—É–º": {
            "age_limit": 18,
            "advantages": ["–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–æ 700 000 ‚ÇΩ", "–†–∞—Å—Å—Ä–æ—á–∫–∞ 0%"],
            "ref_link": "https://tinkoff.ru/platinum",
            "card_type": ["credit"]
        }
    },
    "–°–±–µ—Ä–±–∞–Ω–∫": {
        "SberPrime": {
            "age_limit": 16,
            "advantages": ["–ü–æ–¥–ø–∏—Å–∫–∏ (Okko, –°–±–µ—Ä–ü—Ä–∞–π–º)", "–ö—ç—à–±—ç–∫ 10%"],
            "ref_link": "https://sberbank.ru/prime",
            "card_type": ["subscription"]
        }
    }
}

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_data = defaultdict(lambda: {
    'age': None,
    'points': 0,
    'achievements': set(),
    'selected_cards': [],
    'invited': 0,
    'preferences': defaultdict(int)
})

ASK_AGE = 1
SELECT_CARDS = 2

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def build_keyboard(buttons, back_button=None):
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫."""
    keyboard = [[InlineKeyboardButton(btn[0], callback_data=btn[1])] for btn in buttons]
    if back_button:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_button)])
    return InlineKeyboardMarkup(keyboard)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π."""
    args = context.args if context.args else []
    user_id = update.effective_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if args and args[0].startswith("ref_"):
        referrer_id = int(args[0][4:])
        if referrer_id != user_id:
            user_data[referrer_id]['points'] += 50
            user_data[referrer_id]['invited'] += 1
    
    keyboard = [("14-17 –ª–µ—Ç", "age_14_17"), ("18+ –ª–µ—Ç", "age_18_plus")]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à—É—é –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É!\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:",
        reply_markup=build_keyboard(keyboard)
    )
    return ASK_AGE

async def handle_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    user_data[user_id]['age'] = 14 if query.data == "age_14_17" else 18
    user_data[user_id]['points'] += 10
    
    await show_main_menu(query)
    return ConversationHandler.END

async def show_main_menu(query):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    buttons = [("üè¶ –ö–∞—Ä—Ç—ã", "category_banks"), ("üîç –°—Ä–∞–≤–Ω–∏—Ç—å", "compare_cards"), 
               ("üéÅ –ê–∫—Ü–∏–∏", "promo"), ("üèÜ –ü—Ä–æ—Ñ–∏–ª—å", "profile")]
    await query.edit_message_text(
        "üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=build_keyboard(buttons)
    )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    user_id = query.from_user.id
    data = user_data[user_id]
    
    text = (f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"‚≠ê –ë–∞–ª–ª—ã: {data['points']}\n"
            f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {len(data['achievements'])}\n"
            f"ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {data['invited']}\n")
    
    buttons = [("üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", "invite"), ("üîô –ù–∞–∑–∞–¥", "back_main")]
    await query.edit_message_text(text, reply_markup=build_keyboard(buttons))

async def show_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    
    text = "üéÅ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
    for bank, cards in banks.items():
        for card, data in cards.items():
            if 'promo' in data:
                text += f"üè¶ <b>{bank}</b> - {card}:\n"
                text += "\n".join(f"‚Ä¢ {promo}" for promo in data['promo']) + "\n\n"
    
    await query.edit_message_text(text, reply_markup=build_keyboard([], "back_main"), parse_mode="HTML")

async def handle_card_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç."""
    query = update.callback_query
    await query.answer()

    if query.data == "back_main":
        await show_main_menu(query)
        return

async def show_card_selection(query, context):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    user_id = query.from_user.id
    keyboard = []

    for bank_name, cards in banks.items():
        for card_name, data in cards.items():
            if user_data[user_id]['age'] >= data['age_limit']:
                keyboard.append([(card_name, f"select_{bank_name}_{card_name}")])

    keyboard.append([("üîô –ù–∞–∑–∞–¥", "back_main")])
    await query.edit_message_text("üîç –í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", reply_markup=build_keyboard(keyboard))

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={ASK_AGE: [CallbackQueryHandler(handle_age)]},
        fallbacks=[]
    )
    
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(profile, pattern="^profile$"))
    app.add_handler(CallbackQueryHandler(show_promo, pattern="^promo$"))
    app.add_handler(CallbackQueryHandler(show_main_menu, pattern="^back_main$"))
    
    app.run_polling()

if __name__ == "__main__":
    main()
