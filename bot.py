import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import URLInputFile

bot = Bot(token="YOUR_BOT_TOKEN")
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect('cards.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''CREATE TABLE IF NOT EXISTS cards
               (id INTEGER PRIMARY KEY,
                name TEXT UNIQUE,
                cashback REAL,
                limits TEXT,
                insurance TEXT,
                category TEXT)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS links
               (card_id INTEGER,
                url TEXT,
                FOREIGN KEY(card_id) REFERENCES cards(id))''')

conn.commit()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É)
ADMINS = [123456789]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_kb = [
    [types.KeyboardButton(text="üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è")],
    [types.KeyboardButton(text="üí≥ –°—Ä–∞–≤–Ω–∏—Ç—å –∫–∞—Ä—Ç—ã")],
    [types.KeyboardButton(text="üìö –û–±—É—á–µ–Ω–∏–µ")]
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞!",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=main_kb,
            resize_keyboard=True
        )
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message(Command("addlink"))
async def add_link(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã | –°—Å—ã–ª–∫–∞\n"
        "–ü—Ä–∏–º–µ—Ä: Tinkoff Black | https://tinkoff.ru/black"
    )
    
@dp.message(F.text.contains("|"))
async def process_link(message: types.Message):
    try:
        card_name, url = message.text.split("|", 1)
        card_name = card_name.strip()
        url = url.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ä—Ç—ã
        cursor.execute("SELECT id FROM cards WHERE name=?", (card_name,))
        card_id = cursor.fetchone()
        
        if card_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
            cursor.execute(
                "INSERT OR REPLACE INTO links VALUES (?, ?)",
                (card_id[0], url)
            conn.commit()
            await message.answer(f"–°—Å—ã–ª–∫–∞ –¥–ª—è {card_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ")
            
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

# –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
@dp.message(F.text == "üí≥ –°—Ä–∞–≤–Ω–∏—Ç—å –∫–∞—Ä—Ç—ã")
async def show_cards(message: types.Message):
    cursor.execute('''SELECT cards.*, links.url 
                   FROM cards 
                   LEFT JOIN links ON cards.id=links.card_id''')
    
    cards = cursor.fetchall()
    
    for card in cards:
        card_id, name, cashback, limits, insurance, category, url = card
        
        text = (
            f"<b>{name}</b>\n\n"
            f"–ö—ç—à–±–µ–∫: {cashback}%\n"
            f"–õ–∏–º–∏—Ç—ã: {limits}\n"
            f"–°—Ç—Ä–∞—Ö–æ–≤–∫–∏: {insurance}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        if url:
            builder.add(types.InlineKeyboardButton(
                text="üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É",
                url=url)
            )
            
        builder.add(types.InlineKeyboardButton(
            text="‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            callback_data=f"fav_{card_id}")
        )
        
        await message.answer_photo(
            photo=URLInputFile("https://example.com/card-image.jpg"),
            caption=text,
            reply_markup=builder.as_markup()
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    dp.run_polling(bot)
