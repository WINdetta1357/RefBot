from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, ConversationHandler
import logging
import os
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "8105012250:AAFmOW45SKDGrn0pqIFvSVhQv3uwodCMKXs")

# --- –î–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö ---
banks = {
    "–¢–∏–Ω—å–∫–æ—Ñ—Ñ": {
        "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–ª—ç–∫": {
            "age_limit": 14,
            "advantages": ["–ö—ç—à–±—ç–∫ 1-30%", "–î–æ 7% –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫"],
            "ref_link": "https://tinkoff.ru/black",
            "promo": ["+1000 ‚ÇΩ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"]
        },
        "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ü–ª–∞—Ç–∏–Ω—É–º": {
            "age_limit": 18,
            "advantages": ["–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–æ 700 000 ‚ÇΩ", "–†–∞—Å—Å—Ä–æ—á–∫–∞ 0%"],
            "ref_link": "https://tinkoff.ru/platinum"
        }
    },
    "–°–±–µ—Ä–±–∞–Ω–∫": {
        "SberPrime": {
            "age_limit": 16,
            "advantages": ["–ü–æ–¥–ø–∏—Å–∫–∏ (Okko, –°–±–µ—Ä–ü—Ä–∞–π–º)", "–ö—ç—à–±—ç–∫ 10%"],
            "ref_link": "https://sberbank.ru/prime"
        }
    }
}

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_age = {}
ASK_AGE = 1

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def start(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton("14-17 –ª–µ—Ç", callback_data="age_14_17")],
        [InlineKeyboardButton("18+ –ª–µ—Ç", callback_data="age_18_plus")]
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç. –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ASK_AGE

async def handle_age(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == "age_14_17":
        user_age[chat_id] = 14
    else:
        user_age[chat_id] = 18

    await show_main_menu(query)
    return ConversationHandler.END

async def show_main_menu(query):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã", callback_data="category_banks")],
        [InlineKeyboardButton("üîç –°—Ä–∞–≤–Ω–∏—Ç—å –∫–∞—Ä—Ç—ã", callback_data="compare_cards")],
        [InlineKeyboardButton("üéÅ –ê–∫—Ü–∏–∏", callback_data="promo")]
    ]
    await query.edit_message_text(
        "üéÆ –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    try:
        if query.data == "category_banks":
            keyboard = [[InlineKeyboardButton(bank, callback_data=f"bank_{bank}")] for bank in banks]
            await query.edit_message_text("üè¶ –í—ã–±–µ—Ä–∏ –±–∞–Ω–∫:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data.startswith("bank_"):
            bank_name = query.data.split("_")[1]
            chat_id = query.message.chat_id
            keyboard = []
            for card in banks[bank_name]:
                if user_age.get(chat_id, 0) >= banks[bank_name][card]["age_limit"]:
                    keyboard.append([InlineKeyboardButton(card, callback_data=f"card_{bank_name}_{card}")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="category_banks")])
            await query.edit_message_text(f"üìá –ö–∞—Ä—Ç—ã {bank_name}:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data.startswith("card_"):
            _, bank_name, card_name = query.data.split("_")
            card = banks[bank_name][card_name]
            text = f"<b>{card_name}</b>\n\n"
            text += "üî• <u>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</u>:\n- " + "\n- ".join(card["advantages"]) + "\n\n"
            text += f"üîó <a href='{card['ref_link']}'>–û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É</a>"
            await query.edit_message_text(text, parse_mode="HTML")

        elif query.data == "compare_cards":
            text = "üîç <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç:</b>\n\n"
            for bank_name, cards in banks.items():
                text += f"üè¶ <u>{bank_name}</u>:\n"
                for card_name, data in cards.items():
                    text += f"‚ñ´Ô∏è {card_name} (–æ—Ç {data['age_limit']}+ –ª–µ—Ç)\n"
            await query.edit_message_text(text, parse_mode="HTML")

        elif query.data == "promo":
            text = "üéÅ <b>–ê–∫—Ü–∏–∏:</b>\n\n"
            for bank_name, cards in banks.items():
                for card_name, data in cards.items():
                    if "promo" in data:
                        text += f"üî• {card_name}: {', '.join(data['promo'])}\n"
            await query.edit_message_text(text, parse_mode="HTML")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={ASK_AGE: [CallbackQueryHandler(handle_age)]},
        fallbacks=[],
        per_message=True
    )
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button_handler))

    # –î–ª—è Railway
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        url_path=BOT_TOKEN,
        webhook_url=f"https://web-production-c568.up.railway.app/{BOT_TOKEN}"
    )

if __name__ == "__main__":
    main()
