from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ConversationHandler, CallbackContext
import logging
import os
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
ASK_AGE = 1
SELECT_BANK = 2
SELECT_CARDS = 3
SHOW_ALL_CARDS = 4

# --- –î–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–∫–∞—Ö ---
banks = {
    "–°–±–µ—Ä–ë–∞–Ω–∫": {
        "–°–±–µ—Ä–ö–∞—Ä—Ç–∞": {
            "age_limit": 14,
            "advantages": ["–ö—ç—à–±—ç–∫ –¥–æ 10%", "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"],
            "ref_link": "https://unicom24.ru/redirect/1300139"
        },
        "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –°–±–µ—Ä–ë–∞–Ω–∫": {
            "age_limit": 18,
            "advantages": ["–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–æ 300 000 ‚ÇΩ", "–õ—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ 50 –¥–Ω–µ–π"],
            "ref_link": "https://unicom24.ru/redirect/1300140"
        }
    },
    "–¢–∏–Ω—å–∫–æ—Ñ—Ñ": {
        "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–ª—ç–∫": {
            "age_limit": 14,
            "advantages": ["–ö—ç—à–±—ç–∫ 1-30%", "–î–æ 7% –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫"],
            "ref_link": "https://unicom24.ru/redirect/1300141"
        },
        "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ü–ª–∞—Ç–∏–Ω—É–º": {
            "age_limit": 18,
            "advantages": ["–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–æ 700 000 ‚ÇΩ", "–†–∞—Å—Å—Ä–æ—á–∫–∞ 0%"],
            "ref_link": "https://unicom24.ru/redirect/1300142"
        }
    },
    "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫": {
        "–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫–∞": {
            "age_limit": 14,
            "advantages": ["–ö—ç—à–±—ç–∫ –¥–æ 5%", "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"],
            "ref_link": "https://unicom24.ru/redirect/1300143"
        },
        "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫–∞": {
            "age_limit": 18,
            "advantages": ["–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–æ 500 000 ‚ÇΩ", "–õ—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ 100 –¥–Ω–µ–π"],
            "ref_link": "https://unicom24.ru/redirect/1300144"
        }
    }
}

user_data = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def build_keyboard(buttons):
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton(text, callback_data=callback)] for text, callback in buttons]
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: CallbackContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        ("14-17 –ª–µ—Ç", "age_14_17"),
        ("18+ –ª–µ—Ç", "age_18_plus")
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:",
        reply_markup=build_keyboard(keyboard)
    )
    return ASK_AGE

async def handle_age(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    age = 14 if query.data == "age_14_17" else 18
    user_data[user_id] = {"age": age}

    keyboard = [(bank, f"select_bank_{bank}") for bank in banks.keys()]
    keyboard.append(("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã", "show_all_cards"))
    keyboard.append(("üîô –ù–∞–∑–∞–¥", "back_to_main_menu"))

    await query.edit_message_text(
        "üè¶ –í—ã–±–µ—Ä–∏ –±–∞–Ω–∫ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ —É—Å–ª–æ–≤–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç:",
        reply_markup=build_keyboard(keyboard)
    )
    return SELECT_BANK

async def handle_bank_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data == "show_all_cards":
        await show_all_cards(query)
        return SHOW_ALL_CARDS

    bank_name = query.data.split("_", 2)[2]
    user_data[user_id]['selected_bank'] = bank_name

    keyboard = [(card, f"show_card_{card}") for card in banks[bank_name].keys()]
    keyboard.append(("üîô –ù–∞–∑–∞–¥", "back_to_banks"))

    await query.edit_message_text(
        f"üîç –í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É –≤ –±–∞–Ω–∫–µ {bank_name}:",
        reply_markup=build_keyboard(keyboard)
    )
    return SELECT_CARDS

async def show_all_cards(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª–æ–≤–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç"""
    text = "üîç <b>–£—Å–ª–æ–≤–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç:</b>\n\n"
    for bank_name, cards in banks.items():
        for card_name, card in cards.items():
            text += f"üè¶ <b>{bank_name}</b> - <b>{card_name}</b>\n"
            text += "üî• <u>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</u>\n- " + "\n- ".join(card["advantages"]) + "\n"
            text += f"üîó <a href='{card['ref_link']}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É</a>\n\n"

    keyboard = [("üîô –ù–∞–∑–∞–¥", "back_to_banks")]
    await query.edit_message_text(
        text,
        reply_markup=build_keyboard(keyboard),
        parse_mode="HTML"
    )
    return SELECT_BANK

async def handle_card_info(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    bank_name = user_data[user_id]['selected_bank']
    card_name = query.data.split("_", 2)[2]
    card = banks[bank_name][card_name]

    text = f"üè¶ <b>{bank_name}</b> - <b>{card_name}</b>\n\n"
    text += "üî• <u>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</u>\n- " + "\n- ".join(card["advantages"]) + "\n\n"

    keyboard = [[InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å", url=card['ref_link'])]]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_banks")])
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )
    return SELECT_CARDS

async def handle_back_main_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    return await start(update, context)

async def handle_back_banks(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    return await handle_age(update, context)

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASK_AGE: [CallbackQueryHandler(handle_age)],
            SELECT_BANK: [
                CallbackQueryHandler(handle_bank_selection),
                CallbackQueryHandler(handle_back_main_menu, pattern="back_to_main_menu")
            ],
            SELECT_CARDS: [
                CallbackQueryHandler(handle_card_info),
                CallbackQueryHandler(handle_back_banks, pattern="back_to_banks")
            ],
            SHOW_ALL_CARDS: [CallbackQueryHandler(show_all_cards)],
        },
        fallbacks=[CallbackQueryHandler(handle_back_main_menu, pattern="back_to_main_menu")],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
