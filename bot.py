from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, ConversationHandler
import logging
import os
import requests
import time
from threading import Thread

# ----- –ù–ê–°–¢–†–û–ô–ö–ò -----
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ .env
HEALTHCHECKS_URL = "https://hc-ping.com/–í–ê–®_–£–ù–ò–ö–ê–õ–¨–ù–´–ô_ID"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π!

# ----- –î–ê–ù–ù–´–ï –û –ö–ê–†–¢–ê–• -----
banks = {
    "–¢–∏–Ω—å–∫–æ—Ñ—Ñ": {
        "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–ª—ç–∫": {
            "age_limit": 14,
            "advantages": ["–ö—ç—à–±—ç–∫ 1-30%", "–î–æ 7% –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫"],
            "ref_link": "https://tinkoff.ru/black"
        },
        "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ü–ª–∞—Ç–∏–Ω—É–º": {
            "age_limit": 18,
            "advantages": ["–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–æ 700 000 ‚ÇΩ"],
            "ref_link": "https://tinkoff.ru/platinum"
        }
    }
}

# ----- –§–ò–®–ö–ò –ü–†–û–¢–ò–í "–ó–ê–°–´–ü–ê–ù–ò–Ø" -----
def keep_alive():
    """–ü–∏–Ω–≥—É–µ–º —Å–µ—Ä–≤–µ—Ä –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Å–ø–∞–ª"""
    while True:
        try:
            # –ü–∏–Ω–≥ Google (—á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª)
            requests.get("https://google.com")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Healthchecks.io
            requests.get(HEALTHCHECKS_URL, timeout=10)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
Thread(target=keep_alive, daemon=True).start()

# ----- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò -----
async def start(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton("14-17 –ª–µ—Ç", callback_data="age_14_17")],
        [InlineKeyboardButton("18+ –ª–µ—Ç", callback_data="age_18_plus")]
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ASK_AGE

async def handle_age(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    if query.data == "age_14_17":
        user_age[chat_id] = 14
    else:
        user_age[chat_id] = 18

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(query)
    return ConversationHandler.END

async def show_main_menu(query):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã", callback_data="category_banks")],
        [InlineKeyboardButton("üîç –°—Ä–∞–≤–Ω–∏—Ç—å –∫–∞—Ä—Ç—ã", callback_data="compare_cards")],
        [InlineKeyboardButton("üéÅ –ê–∫—Ü–∏–∏", callback_data="promo")]
    ]
    await query.edit_message_text(
        "üéÆ –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    try:
        if query.data == "category_banks":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤
            keyboard = [[InlineKeyboardButton(bank, callback_data=f"bank_{bank}")] for bank in banks]
            await query.edit_message_text("üè¶ –í—ã–±–µ—Ä–∏ –±–∞–Ω–∫:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data.startswith("bank_"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞
            bank_name = query.data.split("_")[1]
            chat_id = query.message.chat_id
            keyboard = []
            for card in banks[bank_name]:
                if user_age.get(chat_id, 0) >= banks[bank_name][card]["age_limit"]:
                    keyboard.append([InlineKeyboardButton(card, callback_data=f"card_{bank_name}_{card}")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="category_banks")])
            await query.edit_message_text(f"üìá –ö–∞—Ä—Ç—ã {bank_name}:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == "compare_cards":
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç
            text = "üîç **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π:**\n\n"
            for bank in banks.values():
                for card_name, data in bank.items():
                    text += f"‚ñ´Ô∏è **{card_name}**\n‚Äî –í–æ–∑—Ä–∞—Å—Ç: {data['age_limit']}+\n‚Äî –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {', '.join(data['advantages'])}\n\n"
            await query.edit_message_text(text, parse_mode="Markdown")

        elif query.data == "promo":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ü–∏–∏
            text = "üéÅ **–ê–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**\n\n"
            for bank in banks.values():
                for card in bank.values():
                    if "promo" in card:
                        text += f"üî• {', '.join(card['promo'])}\n"
            await query.edit_message_text(text, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={ASK_AGE: [CallbackQueryHandler(handle_age)]},
        fallbacks=[]
    )
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button_handler))

    # –î–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞ (Railway/Heroku)
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        url_path=BOT_TOKEN,
        webhook_url=f"https://–≤–∞—à-–¥–æ–º–µ–Ω.xyz/{BOT_TOKEN}"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL!
    )

if __name__ == "__main__":
    main()
