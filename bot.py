from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, ConversationHandler
import logging
import os
from dotenv import load_dotenv
from collections import defaultdict

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")

# --- –î–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö ---
banks = {
    "–¢–∏–Ω—å–∫–æ—Ñ—Ñ": {
        "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–ª—ç–∫": {
            "age_limit": 14,
            "advantages": ["–ö—ç—à–±—ç–∫ 1-30%", "–î–æ 7% –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫"],
            "ref_link": "https://tinkoff.ru/black",
            "promo": ["+1000 ‚ÇΩ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"],
            "card_type": ["cashback"]
        },
        "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ü–ª–∞—Ç–∏–Ω—É–º": {
            "age_limit": 18,
            "advantages": ["–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–æ 700 000 ‚ÇΩ", "–†–∞—Å—Å—Ä–æ—á–∫–∞ 0%"],
            "ref_link": "https://tinkoff.ru/platinum",
            "card_type": ["credit"]
        }
    },
    "–°–±–µ—Ä–±–∞–Ω–∫": {
        "SberPrime": {
            "age_limit": 16,
            "advantages": ["–ü–æ–¥–ø–∏—Å–∫–∏ (Okko, –°–±–µ—Ä–ü—Ä–∞–π–º)", "–ö—ç—à–±—ç–∫ 10%"],
            "ref_link": "https://sberbank.ru/prime",
            "card_type": ["subscription"]
        }
    }
}

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_data = defaultdict(lambda: {
    'age': None,
    'points': 0,
    'achievements': set(),
    'selected_cards': [],
    'invited': 0,
    'preferences': defaultdict(int)
})

ASK_AGE = 1
SELECT_CARDS = 2

# --- –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ---
ACHIEVEMENTS = {
    'first_card': {'name': 'üéñ –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞', 'desc': '–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É', 'check': lambda data: len(data['selected_cards']) >= 1},
    'comparer': {'name': 'üîç –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å', 'desc': '–°—Ä–∞–≤–Ω–∏—Ç—å 3 –∫–∞—Ä—Ç—ã', 'check': lambda data: len(data['selected_cards']) >= 3},
    'inviter': {'name': 'ü§ù –ü–æ—Å—Ä–µ–¥–Ω–∏–∫', 'desc': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 5 –¥—Ä—É–∑–µ–π', 'check': lambda data: data['invited'] >= 5},
    'pro': {'name': 'üíé –ü—Ä–æ—Ñ–∏', 'desc': '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 100 –±–∞–ª–ª–æ–≤', 'check': lambda data: data['points'] >= 100}
}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def update_achievements(user_id, context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    achievements = []
    for ach_id, ach in ACHIEVEMENTS.items():
        if ach_id not in user_data[user_id]['achievements'] and ach['check'](user_data[user_id]):
            user_data[user_id]['achievements'].add(ach_id)
            achievements.append(ach['name'])
    
    if achievements:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {', '.join(achievements)}!"
        )

def build_keyboard(buttons, back_button=None):
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫."""
    keyboard = []
    for button_row in buttons:
        row = []
        for btn in button_row:
            if isinstance(btn, tuple):
                # –ö–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç, callback_data)
                row.append(InlineKeyboardButton(btn[0], callback_data=btn[1]))
            else:
                # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                row.append(InlineKeyboardButton(btn, callback_data=btn))
        keyboard.append(row)
    
    if back_button:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_button)])
    
    return InlineKeyboardMarkup(keyboard)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π."""
    args = context.args
    user_id = update.effective_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if args and args[0].startswith('ref_'):
        referrer_id = int(args[0][4:])
        if referrer_id != user_id:
            user_data[referrer_id]['points'] += 50
            user_data[referrer_id]['invited'] += 1
            await update_achievements(referrer_id, context)
    
    keyboard = [
        [("14-17 –ª–µ—Ç", "age_14_17")],
        [("18+ –ª–µ—Ç", "age_18_plus")]
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à—É—é –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É!\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:",
        reply_markup=build_keyboard(keyboard)
    )
    return ASK_AGE

async def handle_age(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    user_data[user_id]['age'] = 14 if query.data == "age_14_17" else 18
    user_data[user_id]['points'] += 10  # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –∑–∞ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
    
    await show_main_menu(query)
    return ConversationHandler.END

async def show_main_menu(query):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    buttons = [
        [("üè¶ –ö–∞—Ä—Ç—ã", "category_banks")],
        [("üîç –°—Ä–∞–≤–Ω–∏—Ç—å", "compare_cards")],
        [("üéÅ –ê–∫—Ü–∏–∏", "promo")],
        [("üèÜ –ü—Ä–æ—Ñ–∏–ª—å", "profile")]
    ]
    await query.edit_message_text(
        "üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=build_keyboard(buttons)
    )

async def profile(update: Update, context: CallbackContext):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    data = user_data[user_id]
    
    text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
    text += f"‚≠ê –ë–∞–ª–ª—ã: {data['points']}\n"
    text += f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {len(data['achievements'])}/{len(ACHIEVEMENTS)}\n"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    text += f"ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {data['invited']}\n\n"
    
    if data['achievements']:
        text += "–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(
            [ACHIEVEMENTS[ach_id]['name'] for ach_id in data['achievements']]
        )
    
    buttons = [
        [("üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", "invite")],
        [("üìà –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "leaderboard")],
        [("üîô –ù–∞–∑–∞–¥", "back_main")]
    ]
    await query.edit_message_text(
        text,
        reply_markup=build_keyboard(buttons)
    )

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    app = Application.builder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASK_AGE: [CallbackQueryHandler(handle_age)],
            SELECT_CARDS: [CallbackQueryHandler(handle_card_selection)]
        },
        fallbacks=[],
        per_message=False
    )
    
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(profile, pattern="profile"))
    app.add_handler(CallbackQueryHandler(show_promo, pattern="promo"))
    
    # –î–ª—è Railway
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        url_path=BOT_TOKEN,
        webhook_url=f"https://web-production-c568.up.railway.app/{BOT_TOKEN}"
    )

if __name__ == "__main__":
    main()
