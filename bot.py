import sqlite3
from urllib.parse import urlparse
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import URLInputFile

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="YOUR_BOT_TOKEN")
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('cards.db')
cursor = conn.cursor()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –í–∞–ª–∏–¥–∞—Ü–∏—è URL
def is_valid_url(url):
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except:
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    with conn:
        cursor.execute('''CREATE TABLE IF NOT EXISTS cards
                       (id INTEGER PRIMARY KEY,
                        name TEXT UNIQUE,
                        cashback REAL,
                        limits TEXT,
                        insurance TEXT,
                        category TEXT)''')
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS links
                       (card_id INTEGER PRIMARY KEY,
                        url TEXT,
                        FOREIGN KEY(card_id) REFERENCES cards(id))''')

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è")],
        [types.KeyboardButton(text="üí≥ –°—Ä–∞–≤–Ω–∏—Ç—å –∫–∞—Ä—Ç—ã")],
        [types.KeyboardButton(text="üìö –û–±—É—á–µ–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üè¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb
    )

@dp.message(Command("addlink"))
async def add_link(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    await message.answer(
        "üîó –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã | –°—Å—ã–ª–∫–∞</b>\n"
        "–ü—Ä–∏–º–µ—Ä: Tinkoff Black | https://tinkoff.ru/black",
        parse_mode="HTML"
    )

@dp.message(F.text.contains("|"))
async def process_link(message: types.Message):
    try:
        card_name, url = message.text.split("|", 1)
        card_name = card_name.strip()
        url = url.strip()
        
        if not is_valid_url(url):
            return await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞!")
        
        with conn:
            cursor.execute("SELECT id FROM cards WHERE name=?", (card_name,))
            card_id = cursor.fetchone()
            
            if card_id:
                cursor.execute(
                    "INSERT OR REPLACE INTO links VALUES (?, ?)",
                    (card_id[0], url)
                )
                await message.answer(f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è {card_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            else:
                await message.answer("‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ")
                
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(F.text == "üí≥ –°—Ä–∞–≤–Ω–∏—Ç—å –∫–∞—Ä—Ç—ã")
async def show_cards(message: types.Message):
    try:
        cursor.execute('''SELECT cards.*, links.url 
                       FROM cards 
                       LEFT JOIN links ON cards.id=links.card_id''')
        
        cards = cursor.fetchall()
        
        if not cards:
            return await message.answer("üì≠ –ë–∞–∑–∞ –∫–∞—Ä—Ç –ø—É—Å—Ç–∞")
            
        for card in cards:
            card_id, name, cashback, limits, insurance, category, url = card
            
            builder = InlineKeyboardBuilder()
            if url:
                builder.add(types.InlineKeyboardButton(
                    text="üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É",
                    url=url
                ))
            
            builder.add(types.InlineKeyboardButton(
                text="‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                callback_data=f"fav_{card_id}"
            ))
            
            text = (
                f"üè¶ <b>{name}</b>\n\n"
                f"üíµ –ö—ç—à–±–µ–∫: {cashback}%\n"
                f"üìä –õ–∏–º–∏—Ç—ã: {limits}\n"
                f"üõ° –°—Ç—Ä–∞—Ö–æ–≤–∫–∏: {insurance}\n"
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
            )
            
            await message.answer_photo(
                photo=URLInputFile("https://example.com/card-image.jpg"),
                caption=text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    dp.run_polling(bot)
